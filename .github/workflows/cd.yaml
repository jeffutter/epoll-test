name: CD # Continuous Deployment

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  push:
    tags:
      - '[v]?[0-9]+.[0-9]+.[0-9]+'

jobs:
  publish:
    name: Publishing for ${{ matrix.job.os }}-${{ matrix.job.architecture }}
    permissions:
      contents: write
      packages: write
    runs-on: ${{ matrix.job.os }}
    container: ${{matrix.container}}
    strategy:
      matrix:
        rust: [stable]
        job:
          - os: ubuntu-latest
            os-name: linux
            target: x86_64-unknown-linux-musl
            architecture: x86_64
            container:
              image: rust:alpine

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.job.target }}
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          toolchain: ${{ matrix.rust }}
          args: --release --target ${{ matrix.job.target }}

      - name: Packaging final binary
        shell: bash
        run: |
          cd target/${{ matrix.job.target }}/release

          ####### reduce binary size by removing debug symbols #######
          BINARY_NAME=epoll-test
          strip $BINARY_NAME

          ########## create tar.gz ##########
          RELEASE_NAME=epoll-test-${GITHUB_REF/refs\/tags\//}-${{ matrix.job.os-name }}-${{ matrix.job.architecture }}
          tar czvf $RELEASE_NAME.tar.gz $BINARY_NAME

          ########## create sha256 ##########
          if [[ ${{ runner.os }} == 'Windows' ]]; then
            certutil -hashfile $RELEASE_NAME.tar.gz sha256 | grep -E [A-Fa-f0-9]{64} > $RELEASE_NAME.sha256
          else
            shasum -a 256 $RELEASE_NAME.tar.gz > $RELEASE_NAME.sha256
          fi

          echo "BIN_PATH=target/${{matrix.job.target}}/release/$BINARY_NAME" >> $GITHUB_ENV

      - name: Releasing assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            target/${{ matrix.job.target }}/release/epoll-test-*.tar.gz
            target/${{ matrix.job.target }}/release/epoll-test-*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifact
        if: ${{ matrix.job.target == 'x86_64-unknown-linux-musl' }}
        uses: actions/upload-artifact@v4
        with:
          name: binary
          path: ${{ env.BIN_PATH }}

  publish-container:
    name: Publish Container
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: binary
        path: ./docker-release

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: ./docker-release
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha, scope=${{ github.workflow }}
        cache-to: type=gha, scope=${{ github.workflow }}
